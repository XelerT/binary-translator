#pragma once

#pragma GCC diagnostic ignored "-Wwrite-strings"

const uint8_t JMP_LENGTH = 5;

enum cmd_consts {
        NEAR_JMP_RANGE = 0xFF
};

unsigned enum cmd_bit_masks {
        MODE_USE_REG                   = 0,
        MODE_8_BYTE_IN_ADDRESS         = 2,
        MODE_REG_ADDRESS               = 3,

        USE_R_REGS                     = 0x41,
        USE_SRC_R_REG                  = 0x4D,
        x64bit_PREFIX                  = 0x48,

        CONDITIONAL_JMPS_MASK_REL8     = 0x70,
        CONDITIONAL_JMPS_MASK_REL32    = 0x80,
        COND_JMPS_REL_CONVERTER_MASK   = 0x8F,

        PREFIX_64_bit = 0x0F,

        ADD_REG_REG_MASK = 1 << 7,

        MUL_MASK = 4 << 3,
        DIV_MASK = 3 << 4,

        IMMED_SUB_MASK = 0x5
};

enum mod_reg_rm_masks {
        IMMED_PUSH_MRR_MASK = 8   /*1000*/
};

enum cmds_codes {
        MEM_REG_PUSH  = 0xFF,
        MEM_REG_POP   = 0x8F,
        IMMED_PUSH    = 0x06,
        REG_PUSH_POP  = 0x02,
        ADD           = 0x00,
        SUB           = 0x29,
        ADD_SUB_IMMED = 0x81,
        MUL           = 0xF7,
        DIV           = 0xFF,
        RELATIVE_CALL = 0xE8,
        REG_CALL      = 0xFF,
        FAR_CALL      = 0x9A,
        RET           = 0xC3,

        SHORT_JMP     = 0xEB,
        NEAR_JMP      = 0xE9,
        JB            = 0x72,
        JAE           = 0x73,
        JE            = 0x74,
        JNE           = 0x75,
        JBE           = 0x76,
        JA            = 0x77,

        IMMED_MOV     = 0xB8,
        REG_MOV       = 0x89,
        MEM_REG_MOV   = 0x8B,
        MEM_IMMED_MOV = 0xC7
};

enum my_cmds_encode {
        CMD_MY_PUSH  =  1,
        CMD_MY_POP   =  2,
        CMD_MY_ADD   =  3,
        CMD_MY_SUB   =  4,
        CMD_MY_MUL   =  5,
        CMD_MY_DIV   =  6,
        CMD_MY_OUT   =  7,
        CMD_MY_IN    =  8,
        CMD_MY_LABEL = 12,
        CMD_MY_HLT   =  9,
        CMD_MY_SQRT  = 16,
        CMD_MY_CALL  = 13,
        CMD_MY_RET   = 15,
        CMD_MY_JMP   = 11,
        CMD_MY_JB    = 17,
        CMD_MY_JBE   = 18,
        CMD_MY_JA    = 19,
        CMD_MY_JAE   = 20,
        CMD_MY_JE    = 21,
        CMD_MY_JNE   = 22
};

enum x86_regs {
        RAX = 0,
        RCX = 1,
        RDX = 2,
        RBX = 3,
        RSP = 4,
        RBP = 5,
        RSI = 6,
        RDI = 7,
        R8  = 10,
        R9  = 11,
        R10 = 12,
        R11 = 13,
        R12 = 14,
        R13 = 15,
        R14 = 16,
        R15 = 17,

        INVALID_REG = 0xFF
};

struct my2x86cmd_t {
        char       *my_name = nullptr;
        int       my_encode = 0;
        unsigned char code1 = 0;
        unsigned char code2 = 0;
        unsigned char code3 = 0;
};

const my2x86cmd_t CMDS_TABLE[] =
{
        {.my_name = "push",  .my_encode = CMD_MY_PUSH, .code1 = IMMED_PUSH, .code2 = REG_PUSH_POP, .code3 = MEM_REG_PUSH},
        {.my_name = "pop",   .my_encode = CMD_MY_POP,  .code1 = REG_PUSH_POP, .code2 = MEM_REG_POP},
        {.my_name = "add",   .my_encode = CMD_MY_ADD,  .code1 = ADD},
        {.my_name = "sub",   .my_encode = CMD_MY_SUB,  .code1 = SUB},
        {.my_name = "mul",   .my_encode = CMD_MY_MUL,  .code1 = MUL},
        {.my_name = "div",   .my_encode = CMD_MY_DIV,  .code1 = MUL, .code2 = 0xFF},

        {.my_name = "out",   .my_encode =  CMD_MY_OUT},
        {.my_name = "in",    .my_encode =  CMD_MY_IN},
        {.my_name = "hlt",   .my_encode =  CMD_MY_HLT},
        {.my_name = "label", .my_encode =  CMD_MY_LABEL},
        {.my_name = "sqrt",  .my_encode =  CMD_MY_SQRT, .code1 = CMD_MY_SQRT},

        {.my_name = "call",  .my_encode = CMD_MY_CALL, .code1 = RELATIVE_CALL, .code2 = REG_CALL},
        {.my_name = "ret",   .my_encode = CMD_MY_RET,  .code1 = RET},
        {.my_name = "jmp",   .my_encode = CMD_MY_JMP,  .code1 = SHORT_JMP, .code2 = NEAR_JMP},
        {.my_name = "jb",    .my_encode = CMD_MY_JB,   .code1 = JB,  .code2 = (JB  & COND_JMPS_REL_CONVERTER_MASK) | 0x80},
        {.my_name = "jbe",   .my_encode = CMD_MY_JBE,  .code1 = JBE, .code2 = (JBE & COND_JMPS_REL_CONVERTER_MASK) | 0x80},
        {.my_name = "ja",    .my_encode = CMD_MY_JA,   .code1 = JA,  .code2 = (JA  & COND_JMPS_REL_CONVERTER_MASK) | 0x80},
        {.my_name = "jae",   .my_encode = CMD_MY_JAE,  .code1 = JAE, .code2 = (JAE & COND_JMPS_REL_CONVERTER_MASK) | 0x80},
        {.my_name = "je",    .my_encode = CMD_MY_JE,   .code1 = JE,  .code2 = (JE  & COND_JMPS_REL_CONVERTER_MASK) | 0x80},
        {.my_name = "jne",   .my_encode = CMD_MY_JNE,  .code1 = JNE, .code2 = (JNE & COND_JMPS_REL_CONVERTER_MASK) | 0x80}
};

const int N_COMMANDS = 20;
