#pragma GCC diagnostic ignored "-Wwrite-strings"

enum cmd_bit_masks {
        MODE_USE_REG           = 0,
        MODE_8_BYTE_IN_ADDRESS = 2,
        MODE_REG_ADDRESS       = 3,

        USE_R_REGS       = 0x41,
        ADD_64bit_PREFIX = 0x48
};

enum mod_reg_rm_masks {
        IMMED_PUSH_MRR_MASK = 8   /*1000*/
};

enum cmds_codes {
        MEM_REG_PUSH = 0xFF,
        MEM_REG_POP  = 0x8F,
        IMMED_PUSH   = 0x6,
        REG_PUSH_POP = 0x2,
        ADD          = 0x0,
        SUB          = 0x29,
        MUL          = 0xF7,
        MEM_CALL     = 0xE8,
        REG_CALL     = 0xFF,
        RET          = 0xC3
};

enum my_cmds_incode {
        CMD_MY_PUSH =  1,
        CMD_MY_POP  =  2,
        CMD_MY_ADD  =  3,
        CMD_MY_SUB  =  4,
        CMD_MY_MUL  =  5,
        CMD_MY_DIV  =  6,
        CMD_MY_CALL = 13,
        CMD_MY_RET  = 15
};

const my2x86cmd_t cmds_table[] =
{
        {.my_name = "push", .my_incode =  1, .code1 = IMMED_PUSH, .code2 = REG_PUSH_POP, .code3 = MEM_REG_PUSH},
        {.my_name = "pop",  .my_incode =  2, .code1 = REG_PUSH_POP, .code2 = MEM_REG_POP},
        {.my_name = "add",  .my_incode =  3, .code1 = ADD},
        {.my_name = "sub",  .my_incode =  4, .code1 = SUB},
        {.my_name = "mul",  .my_incode =  5, .code1 = MUL},
        {.my_name = "call", .my_incode = 13, .code1 = MEM_CALL, .code2 = REG_CALL},
        {.my_name = "ret",  .my_incode = 15, .code1 = RET}
};

const int N_COMMANDS = 7;
